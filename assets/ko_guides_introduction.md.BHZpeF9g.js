import{_ as e,c as r,o as a,ag as n}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"Granite","description":"","frontmatter":{},"headers":[],"relativePath":"ko/guides/introduction.md","filePath":"ko/guides/introduction.md","lastUpdated":1748425526000}'),i={name:"ko/guides/introduction.md"};function o(s,t,d,l,c,p){return a(),r("div",null,t[0]||(t[0]=[n('<h1 id="granite" tabindex="-1">Granite <a class="header-anchor" href="#granite" aria-label="Permalink to &quot;Granite&quot;">​</a></h1><p>Granite은 React Native 기반 프레임워크예요. 단단한 화강암(granite)처럼, 프로젝트 개발에 견고한 기반을 제공해요. Granite은 다양한 플랫폼에서 일관된 성능과 안정적인 사용자 경험을 보장해요. Granite으로 신뢰할 수 있고 강력한 앱을 만들어 보세요.</p><ul><li>Granite은 테스트 신뢰도를 높이기 위해 <strong>100% 테스트 커버리지</strong>를 목표로 해요.</li><li>모든 컴포넌트와 기능에는 <strong>명확한 문서와 사용법 가이드</strong>를 함께 작성해요.</li><li>모든 기능에는 <strong>E2E(End-to-End, 처음부터 끝까지 동작을 검증하는)</strong> 테스트를 작성해요.</li></ul><h2 id="동기" tabindex="-1">동기 <a class="header-anchor" href="#동기" aria-label="Permalink to &quot;동기&quot;">​</a></h2><p>Granite은 마이크로서비스 아키텍처의 특성을 반영해 설계했어요. 서비스 수가 많아져도 안정적으로 운영할 수 있도록, 다음과 같은 고민과 선택을 했어요.</p><ul><li><p><strong>서비스 간 영향 최소화</strong><br> 서비스가 많아질수록, 하나의 변경이 다른 서비스에 영향을 주면 장애 격리가 어려워져요. Granite은 각 서비스를 독립적으로 배포할 수 있도록 설계해서, 하나의 서비스가 변경돼도 다른 서비스에 영향을 주지 않도록 했어요.</p></li><li><p><strong>빠른 배포를 위한 빌드 최적화</strong><br> 하루에도 수십 번씩 배포가 이뤄지는 상황에서는, 빌드 속도가 곧 개발 속도예요. Granite은 기본 빌드 도구인 Metro 대신 <code>ESBuild</code>를 사용해서 번들링 속도를 높였어요.</p></li><li><p><strong>공통 모듈의 분리로 번들 최적화</strong><br><code>react-native</code>, <code>react</code>처럼 대부분의 서비스에서 공통으로 사용하는 모듈을 매번 개별 번들에 포함하면 번들 사이즈가 불필요하게 커져요. Granite은 공통 번들(shared bundle)을 별도로 정의하고, 각 서비스는 필요한 모듈만 이 공통 번들에서 가져오도록 구성했어요. 이렇게 하면 서비스 번들은 더 가벼워지고 로딩 속도도 빨라져요.</p></li></ul>',6)]))}const g=e(i,[["render",o]]);export{_ as __pageData,g as default};
